name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  TF_VERSION: "1.13.0"
  AWS_REGION: "us-west-2"

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Validate
      run: terraform validate
      
    - name: Terraform Format Check
      run: terraform fmt -check -recursive

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: v0.47.0
        
    - name: TFLint Init
      run: tflint --init
      
    - name: TFLint
      run: tflint

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Setup Terrascan
      uses: tenable/terrascan-action@main
      with:
        iac_type: terraform
        iac_version: v14
        policy_type: aws
        
    - name: Upload Terrascan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: terrascan.sarif

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Run Basic Tests
      run: terraform test tests/basic.tftest.hcl
      
    - name: Run Comprehensive Tests
      run: terraform test tests/comprehensive.tftest.hcl

  cost-estimate:
    name: Cost Estimation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Infracost
      uses: infracost/actions/setup@v2
      with:
        version: 0.10.29
        
    - name: Generate cost estimate
      run: infracost breakdown --path . --format json --out-file infracost.json
      
    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const infracost = JSON.parse(fs.readFileSync('infracost.json', 'utf8'));
          const comment = `## Cost Estimate
          
          **Monthly Cost:** $${infracost.totalCost}
          
          **Resources:**
          ${infracost.projects[0].breakdown.resources.map(r => `- ${r.name}: $${r.monthlyCost}`).join('\n')}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform Docs
      uses: terraform-docs/gh-actions@v1
      with:
        working-dir: .
        output-file: README.md
        output-method: inject
        git-push: 'true'
        git-commit-message: 'docs: auto-generate documentation'
        git-push-user-name: 'github-actions[bot]'
        git-push-user-email: 'github-actions[bot]@users.noreply.github.com'

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, lint, security-scan, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Generate Release Notes
      id: release_notes
      run: |
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed" >> $GITHUB_OUTPUT
        git log --oneline $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: ${{ steps.release_notes.outputs.notes }}
        draft: false
        prerelease: false 